{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize Gemini AI\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || 'your-api-key-here');\nclass GeminiService {\n  constructor() {\n    this.model = genAI.getGenerativeModel({\n      model: 'gemini-pro'\n    });\n  }\n  async askGemini(prompt) {\n    try {\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      return response.text();\n    } catch (error) {\n      console.error('Error calling Gemini API:', error);\n      return 'I apologize, but I encountered an error. Please try again.';\n    }\n  }\n  async getProductRecommendations(userPreferences, currentProducts, query) {\n    const prompt = `\n      As an AI shopping assistant, analyze the user's preferences and provide personalized product recommendations.\n      \n      User Preferences:\n      - Budget: $${userPreferences.budget.min} - $${userPreferences.budget.max}\n      - Size: ${userPreferences.size}\n      - Style Tags: ${userPreferences.styleTags.join(', ')}\n      - Preferred Categories: ${userPreferences.preferredCategories.join(', ')}\n      - Favorite Colors: ${userPreferences.favoriteColors.join(', ')}\n      - Occasion: ${userPreferences.occasion}\n      \n      User Query: \"${query}\"\n      \n      Available Products: ${JSON.stringify(currentProducts.slice(0, 10))}\n      \n      Please provide 3-5 product recommendations with:\n      1. Product ID from the available products\n      2. Reason for recommendation\n      3. Confidence level (0-1)\n      \n      Format as JSON array with fields: id, name, reason, confidence\n    `;\n    try {\n      const response = await this.askGemini(prompt);\n      // Try to parse JSON response, fallback to mock data if parsing fails\n      try {\n        const recommendations = JSON.parse(response);\n        return recommendations.filter(rec => rec.id && rec.name);\n      } catch {\n        return this.getMockRecommendations(userPreferences, query);\n      }\n    } catch (error) {\n      return this.getMockRecommendations(userPreferences, query);\n    }\n  }\n  async generateCartSummary(cartItems) {\n    const prompt = `\n      Analyze this shopping cart and provide insights:\n      \n      Cart Items: ${JSON.stringify(cartItems)}\n      \n      Please provide:\n      1. Total items count\n      2. Total value\n      3. 2-3 personalized recommendations\n      4. 1-2 potential savings tips\n      \n      Format as JSON with fields: totalItems, totalValue, recommendations, savings\n    `;\n    try {\n      const response = await this.askGemini(prompt);\n      try {\n        const summary = JSON.parse(response);\n        return {\n          totalItems: summary.totalItems || cartItems.length,\n          totalValue: summary.totalValue || cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0),\n          recommendations: summary.recommendations || ['Consider adding accessories to complete your look'],\n          savings: summary.savings || ['Look for bundle deals to save more']\n        };\n      } catch {\n        return this.getMockCartSummary(cartItems);\n      }\n    } catch (error) {\n      return this.getMockCartSummary(cartItems);\n    }\n  }\n  async analyzeStyle(userPreferences, productHistory) {\n    const prompt = `\n      Analyze the user's style preferences and shopping history to determine their style profile.\n      \n      User Preferences: ${JSON.stringify(userPreferences)}\n      Shopping History: ${JSON.stringify(productHistory.slice(0, 10))}\n      \n      Please provide:\n      1. Primary style classification\n      2. Confidence level (0-1)\n      3. 3 style improvement suggestions\n      \n      Format as JSON with fields: style, confidence, suggestions\n    `;\n    try {\n      const response = await this.askGemini(prompt);\n      try {\n        const analysis = JSON.parse(response);\n        return {\n          style: analysis.style || 'Contemporary Casual',\n          confidence: analysis.confidence || 0.8,\n          suggestions: analysis.suggestions || ['Try mixing classic pieces with trendy accessories', 'Consider adding more color variety to your wardrobe', 'Explore sustainable fashion options']\n        };\n      } catch {\n        return this.getMockStyleAnalysis();\n      }\n    } catch (error) {\n      return this.getMockStyleAnalysis();\n    }\n  }\n  async getShoppingAdvice(query, context) {\n    const prompt = `\n      As a personal shopping assistant, provide helpful advice for: \"${query}\"\n      \n      Context: ${JSON.stringify(context)}\n      \n      Please provide friendly, practical advice in 2-3 sentences.\n    `;\n    try {\n      return await this.askGemini(prompt);\n    } catch (error) {\n      return 'I\\'m here to help you find the perfect items! Could you tell me more about what you\\'re looking for?';\n    }\n  }\n  getMockRecommendations(userPreferences, query) {\n    const mockProducts = [{\n      id: '1',\n      name: 'Classic Denim Jacket',\n      reason: 'Perfect for your casual style and fits your budget',\n      confidence: 0.9\n    }, {\n      id: '2',\n      name: 'Sustainable Cotton T-Shirt',\n      reason: 'Matches your preferred colors and occasion',\n      confidence: 0.8\n    }, {\n      id: '3',\n      name: 'Versatile Sneakers',\n      reason: 'Great for everyday wear and within your price range',\n      confidence: 0.85\n    }];\n    return mockProducts.filter(() => Math.random() > 0.3);\n  }\n  getMockCartSummary(cartItems) {\n    return {\n      totalItems: cartItems.length,\n      totalValue: cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0),\n      recommendations: ['Consider adding a matching accessory to complete your look', 'You might like our seasonal collection based on your style'],\n      savings: ['Add 2 more items to qualify for free shipping', 'Check out our loyalty program for member discounts']\n    };\n  }\n  getMockStyleAnalysis() {\n    return {\n      style: 'Contemporary Casual',\n      confidence: 0.8,\n      suggestions: ['Try mixing classic pieces with trendy accessories', 'Consider adding more color variety to your wardrobe', 'Explore sustainable fashion options']\n    };\n  }\n}\nexport const geminiService = new GeminiService();\nexport default geminiService;","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","GeminiService","constructor","model","getGenerativeModel","askGemini","prompt","result","generateContent","response","text","error","console","getProductRecommendations","userPreferences","currentProducts","query","budget","min","max","size","styleTags","join","preferredCategories","favoriteColors","occasion","JSON","stringify","slice","recommendations","parse","filter","rec","id","name","getMockRecommendations","generateCartSummary","cartItems","summary","totalItems","length","totalValue","reduce","sum","item","price","quantity","savings","getMockCartSummary","analyzeStyle","productHistory","analysis","style","confidence","suggestions","getMockStyleAnalysis","getShoppingAdvice","context","mockProducts","reason","Math","random","geminiService"],"sources":["C:/New folder/src/services/geminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\r\n\r\n// Initialize Gemini AI\r\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY || 'your-api-key-here');\r\n\r\nexport interface ProductRecommendation {\r\n  id: string;\r\n  name: string;\r\n  reason: string;\r\n  confidence: number;\r\n}\r\n\r\nexport interface CartSummary {\r\n  totalItems: number;\r\n  totalValue: number;\r\n  recommendations: string[];\r\n  savings: string[];\r\n}\r\n\r\nexport interface StyleAnalysis {\r\n  style: string;\r\n  confidence: number;\r\n  suggestions: string[];\r\n}\r\n\r\nclass GeminiService {\r\n  private model = genAI.getGenerativeModel({ model: 'gemini-pro' });\r\n\r\n  async askGemini(prompt: string): Promise<string> {\r\n    try {\r\n      const result = await this.model.generateContent(prompt);\r\n      const response = await result.response;\r\n      return response.text();\r\n    } catch (error) {\r\n      console.error('Error calling Gemini API:', error);\r\n      return 'I apologize, but I encountered an error. Please try again.';\r\n    }\r\n  }\r\n\r\n  async getProductRecommendations(\r\n    userPreferences: any,\r\n    currentProducts: any[],\r\n    query: string\r\n  ): Promise<ProductRecommendation[]> {\r\n    const prompt = `\r\n      As an AI shopping assistant, analyze the user's preferences and provide personalized product recommendations.\r\n      \r\n      User Preferences:\r\n      - Budget: $${userPreferences.budget.min} - $${userPreferences.budget.max}\r\n      - Size: ${userPreferences.size}\r\n      - Style Tags: ${userPreferences.styleTags.join(', ')}\r\n      - Preferred Categories: ${userPreferences.preferredCategories.join(', ')}\r\n      - Favorite Colors: ${userPreferences.favoriteColors.join(', ')}\r\n      - Occasion: ${userPreferences.occasion}\r\n      \r\n      User Query: \"${query}\"\r\n      \r\n      Available Products: ${JSON.stringify(currentProducts.slice(0, 10))}\r\n      \r\n      Please provide 3-5 product recommendations with:\r\n      1. Product ID from the available products\r\n      2. Reason for recommendation\r\n      3. Confidence level (0-1)\r\n      \r\n      Format as JSON array with fields: id, name, reason, confidence\r\n    `;\r\n\r\n    try {\r\n      const response = await this.askGemini(prompt);\r\n      // Try to parse JSON response, fallback to mock data if parsing fails\r\n      try {\r\n        const recommendations = JSON.parse(response);\r\n        return recommendations.filter((rec: any) => rec.id && rec.name);\r\n      } catch {\r\n        return this.getMockRecommendations(userPreferences, query);\r\n      }\r\n    } catch (error) {\r\n      return this.getMockRecommendations(userPreferences, query);\r\n    }\r\n  }\r\n\r\n  async generateCartSummary(cartItems: any[]): Promise<CartSummary> {\r\n    const prompt = `\r\n      Analyze this shopping cart and provide insights:\r\n      \r\n      Cart Items: ${JSON.stringify(cartItems)}\r\n      \r\n      Please provide:\r\n      1. Total items count\r\n      2. Total value\r\n      3. 2-3 personalized recommendations\r\n      4. 1-2 potential savings tips\r\n      \r\n      Format as JSON with fields: totalItems, totalValue, recommendations, savings\r\n    `;\r\n\r\n    try {\r\n      const response = await this.askGemini(prompt);\r\n      try {\r\n        const summary = JSON.parse(response);\r\n        return {\r\n          totalItems: summary.totalItems || cartItems.length,\r\n          totalValue: summary.totalValue || cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0),\r\n          recommendations: summary.recommendations || ['Consider adding accessories to complete your look'],\r\n          savings: summary.savings || ['Look for bundle deals to save more']\r\n        };\r\n      } catch {\r\n        return this.getMockCartSummary(cartItems);\r\n      }\r\n    } catch (error) {\r\n      return this.getMockCartSummary(cartItems);\r\n    }\r\n  }\r\n\r\n  async analyzeStyle(userPreferences: any, productHistory: any[]): Promise<StyleAnalysis> {\r\n    const prompt = `\r\n      Analyze the user's style preferences and shopping history to determine their style profile.\r\n      \r\n      User Preferences: ${JSON.stringify(userPreferences)}\r\n      Shopping History: ${JSON.stringify(productHistory.slice(0, 10))}\r\n      \r\n      Please provide:\r\n      1. Primary style classification\r\n      2. Confidence level (0-1)\r\n      3. 3 style improvement suggestions\r\n      \r\n      Format as JSON with fields: style, confidence, suggestions\r\n    `;\r\n\r\n    try {\r\n      const response = await this.askGemini(prompt);\r\n      try {\r\n        const analysis = JSON.parse(response);\r\n        return {\r\n          style: analysis.style || 'Contemporary Casual',\r\n          confidence: analysis.confidence || 0.8,\r\n          suggestions: analysis.suggestions || [\r\n            'Try mixing classic pieces with trendy accessories',\r\n            'Consider adding more color variety to your wardrobe',\r\n            'Explore sustainable fashion options'\r\n          ]\r\n        };\r\n      } catch {\r\n        return this.getMockStyleAnalysis();\r\n      }\r\n    } catch (error) {\r\n      return this.getMockStyleAnalysis();\r\n    }\r\n  }\r\n\r\n  async getShoppingAdvice(query: string, context: any): Promise<string> {\r\n    const prompt = `\r\n      As a personal shopping assistant, provide helpful advice for: \"${query}\"\r\n      \r\n      Context: ${JSON.stringify(context)}\r\n      \r\n      Please provide friendly, practical advice in 2-3 sentences.\r\n    `;\r\n\r\n    try {\r\n      return await this.askGemini(prompt);\r\n    } catch (error) {\r\n      return 'I\\'m here to help you find the perfect items! Could you tell me more about what you\\'re looking for?';\r\n    }\r\n  }\r\n\r\n  private getMockRecommendations(userPreferences: any, query: string): ProductRecommendation[] {\r\n    const mockProducts = [\r\n      { id: '1', name: 'Classic Denim Jacket', reason: 'Perfect for your casual style and fits your budget', confidence: 0.9 },\r\n      { id: '2', name: 'Sustainable Cotton T-Shirt', reason: 'Matches your preferred colors and occasion', confidence: 0.8 },\r\n      { id: '3', name: 'Versatile Sneakers', reason: 'Great for everyday wear and within your price range', confidence: 0.85 }\r\n    ];\r\n    \r\n    return mockProducts.filter(() => Math.random() > 0.3);\r\n  }\r\n\r\n  private getMockCartSummary(cartItems: any[]): CartSummary {\r\n    return {\r\n      totalItems: cartItems.length,\r\n      totalValue: cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0),\r\n      recommendations: [\r\n        'Consider adding a matching accessory to complete your look',\r\n        'You might like our seasonal collection based on your style'\r\n      ],\r\n      savings: [\r\n        'Add 2 more items to qualify for free shipping',\r\n        'Check out our loyalty program for member discounts'\r\n      ]\r\n    };\r\n  }\r\n\r\n  private getMockStyleAnalysis(): StyleAnalysis {\r\n    return {\r\n      style: 'Contemporary Casual',\r\n      confidence: 0.8,\r\n      suggestions: [\r\n        'Try mixing classic pieces with trendy accessories',\r\n        'Consider adding more color variety to your wardrobe',\r\n        'Explore sustainable fashion options'\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport const geminiService = new GeminiService();\r\nexport default geminiService;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}